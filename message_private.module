<?php
/**
 * Message Private with access permissions based on message fields.
 */

/**
 * Implements hook_help().
 */
function message_private_help($path, $arg) {
  switch ($path) {
    case 'admin/help#message_private':
      $output = file_get_contents(drupal_get_path('module', 'message_private') .'/README.md');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<h3>Message Private README</h3><pre>'. check_plain($output) .'</pre>';
  }
}

/**
 * Implements hook_views_api().
 */
function message_private_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("version" => "3.0");
  }
  return array();
}

/**
 * Implements hook_permission().
 */
function message_private_permission() {

  // Build the permissions.
  $permissions = array();

  $permissions['bypass private message access control'] = array(
    'title' => t('Bypass message access control'),
    'description' => t('Grant to the user the permission to apply CRUD option on any private messages. Grant this permission to trusted users!'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function message_private_menu() {
  $items = array();

  // Add default local task so the Messages view display shows Inbox tab.
  $items['user/%/messages/inbox'] = array(
    'title' => 'Inbox',
    'description' => 'Message Private Inbox',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for Messages tab.
 *
 * Checks for the private_message bundle and user permissions.
 *
 * @param $message
 * @return bool
 */
function message_private_access_callback($message) {
  if ($message->type == 'private_message') {
    return user_access('bypass private message access control') || user_access('view a private_message message instance');
  }
  return FALSE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function message_private_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  switch ($root_path) {
    case 'user/%/messages':
      // Add a 'Create a new message' action link above message_private view.
      $item = menu_get_item('admin/content/message/create/private-message');
      $item['title'] = t('Create a new message');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
      break;
    case 'message/%':
      // Add a Messages tab to the private_message Message entities.
      $message = menu_get_object($type = 'message', $position = 1, $router_item['href']);
      if(isset($message->type) && $message->type == 'private_message') {
        $item = menu_get_item('user/' . $user->uid . '/messages');
        $item['title'] = t('Messages');
        $data['tabs'][0]['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => $item,
        );
      }
      break;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Override some of the menu paths set in message ui module.
 */
function message_private_menu_alter(&$items) {

  $items['message/%message']['access callback'] = 'message_private_access_control';
  $items['message/%message/view']['access callback'] = 'message_private_access_control';
  $items['message/%message/edit']['access callback'] = 'message_private_access_control';
  $items['message/%message/delete']['access callback'] = 'message_private_access_control';

  return $items;
}

/**
 * Message module access callback.
 *
 * @param string $operation
 *   The operation - create, view, update, delete.
 * @param object|string $message
 *   The message object or message type.
 * @param object|null $user_obj
 *   A user object. Optional.
 *
 * @return bool
 *   TRUE if user is allowed to perform the message operation, FALSE otherwise.
 */
function message_private_access_control($operation, $message, $user_obj = NULL) {

  if (empty($user_obj)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    $user = $user_obj;
    $account = user_load($user->uid);
  }

  // Get the message type from the function argument or from the message object.
  $type = is_object($message) ? $message->type : $message;

  // If this is not a private message then use the message callback provided by
  // message_ui module.
  if ($type != 'private_message') {
    return message_ui_access_control($operation, $message);
  }
  else {

    if (user_access('bypass private message access control', $account)) {
      return TRUE;
    }

    // Verify that the user can apply the op.
    if (user_access($operation . ' any message instance', $account)
      || user_access($operation . ' a ' . $type . ' message instance', $account)
    ) {
      if ($type == 'private_message' && $operation != 'create') {
        // Check if the user is message author.
        if ($message->uid == $account->uid) {
          return TRUE;
        }
        $users = field_get_items('message', $message, 'field_message_user_ref');
        if ($users && is_array($users)) {
          foreach ($users as $user_ref) {
            if ($user_ref['target_id'] == $account->uid) {
              return TRUE;
            }
          }
        }
      }
      else {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_message_insert().
 *
 * Send an email if a private message has been created.
 *
 * Currently addslashes() or equivalent is not used on the email,
 * this may be an issue with the message module itself as I don't
 * think escaping strings for email should be done in this module.
 */
function message_private_message_insert($message) {
  if ($message->type == 'private_message') {
    // Use message load as the $message object has issue with mail function.
    // It causes duplicate entry, possibly as mid is missing and the mail
    // function message_notify_send_message tries to re-save as a new message.
    $message = message_load($message->mid);
    $wrapper = entity_metadata_wrapper('message', $message);

    $mail = array();
    $users = $wrapper->field_message_user_ref->value();

    if (is_array($users)) {
      foreach ($users as $user) {
        $notify = field_get_items('user', $user, 'field_private_message_notify');
        if (!empty($notify) && is_array($notify)) {
          // Get the 1st value of the array as there is only 1 possible item.
          $notify = array_shift($notify);
        }
        // If the user has set field for notifications, add their email.
        if (isset($notify['value']) && $notify['value']) {
          $mail[] = $user->mail;
        }
      }
    }
    if (!empty($mail)) {
      message_notify_send_message($message, array('mail' => implode(',', $mail)));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the message_text field from the message edit form. It is only useful
 * post creation. i.e. - contains user data.
 */
function message_private_form_message_ui_instance_message_manage_alter(&$form, &$form_state, $form_id) {
  if ($form['#bundle'] == 'private_message' && isset($form['text']['#type'])) {
    $form['text']['#type'] = 'hidden';
  }
}
