<?php
/**
 * Message access permissions based on message fields.
 */

require_once('message_private.features.inc');

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the message_text field from the message edit form. It is only useful
 * post creation. i.e. - contains user data.
 */
function message_private_form_message_ui_instance_message_manage_alter(&$form, &$form_state, $form_id) {
  if ($form['#bundle'] == 'private_message' && isset($form['text']['#type'])) {
    $form['text']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Add a 'Create a new message' link above view.
 */
function message_private_views_pre_render(&$view) {
  $view->attachment_before =
    '<div class="actions">
            <ul class="action-links">
        <li>' .
    l(t('Create a new message'), 'admin/content/message/create/private-message') .
    '</li>
        </ul>
          </div>';
}

/**
 * Implements hook_flag_default_flags().
 */
function message_private_flag_default_flags() {
  $flags = array();
// Exported flag: "Private Message Notify".
  $flags['private_message_notify'] = array(
    'entity_type' => 'user',
    'title' => 'Private Message Notify',
    'global' => 0,
    'types' => array(),
    'flag_short' => 'Activate Private Message Notifications',
    'flag_long' => 'Receive email notifications for new Private Messages',
    'flag_message' => 'Email notifications will be sent for new Private Messages',
    'unflag_short' => 'De-activate Private Message Notifications',
    'unflag_long' => 'Stop email notifications for new Private Messages',
    'unflag_message' => 'No notifications will be sent for new Private Messages ',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'weight' => 0,
    'show_in_links' => array(
      'full' => 0,
      'token' => 0,
    ),
    'show_as_field' => 0,
    'show_on_form' => 1,
    'access_author' => '',
    'show_contextual_link' => 0,
    'show_on_profile' => 0,
    'access_uid' => '',
    'api_version' => 3,
    // 'status' => TRUE, // Not possible at present, flag at account creation.
  );
  return $flags;
}

/**
 * Implements hook_permission().
 */
function message_private_permission() {

  // Build the permissions.
  $permissions = array();

  $permissions['bypass private message access control'] = array(
    'title' => t('Bypass message access control'),
    'description' => t('Grant to the user the permission to apply CRUD option on
    any private messages. Grant this permission to trusty users!'),
  );

  return $permissions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set subscribe flag default to TRUE
 */
function message_private_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Set default with hook due to issue: https://www.drupal.org/node/701666
  if(isset($form['flag']['private_message_notify'])) {
    $form['flag']['private_message_notify']['#default_value'] = TRUE;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Override some of the menu paths set in message ui module.
 */
function message_private_menu_alter(&$items) {

  $items['message/%message']['access callback'] = 'message_private_access_control';
  $items['message/%message/view']['access callback'] = 'message_private_access_control';
  $items['message/%message/edit']['access callback'] = 'message_private_access_control';
  $items['message/%message/delete']['access callback'] = 'message_private_access_control';

  return $items;
}

/**
 * Message module access callback.
 *
 * @param string $operation
 *   The operation - create, view, update, delete.
 * @param object|string $message
 *   The message object or message type.
 * @param object|null $user_obj
 *   A user object. Optional.
 *
 * @return bool
 *   TRUE if user is allowed to perform the message operation, FALSE otherwise.
 */
function message_private_access_control($operation, $message, $user_obj = NULL) {

  if (empty($user_obj)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    $user = $user_obj;
    $account = user_load($user->uid);
  }

  // Get the message type from the function argument or from the message object.
  $type = is_object($message) ? $message->type : $message;

  // If this is not a private message then use the message callback provided by
  // message_ui module.
  if ($type != 'private_message') {
    return message_ui_access_control($operation, $message);
  } else {

    if (user_access('bypass private message access control', $account)) {
      return TRUE;
    }

    // Verify that the user can apply the op.
    if (user_access($operation . ' any message instance', $account)
      || user_access($operation . ' a ' . $type . ' message instance', $account)
    ) {
      if ($type == 'private_message' && $operation != 'create') {
        // Check if the user is message author.
        if ($message->uid == $account->uid) {
          return TRUE;
        }
        $users = field_get_items('message', $message, 'field_message_user_ref');
        if ($users && is_array($users)) {
          foreach ($users as $user_ref) {
            if ($user_ref['target_id'] == $account->uid) {
              return TRUE;
            }
          }
        }
      }
      else {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_entity_insert().
 *
 * Send an email if a private message has been created.
 *
 * Currently addslashes() or equivalent is not used on the email,
 * this may be an issue with the message module itself as I don't
 * think escaping strings for email should be done in this module.
 */
function message_private_entity_insert($entity, $type) {
  if ($type == 'message' && $entity->type == 'private_message') {
    // Use message load as the $entity object has issue with mail function.
    $message = message_load($entity->mid);
    $wrapper = entity_metadata_wrapper('message', $message);

    $mail = array();
    $flag = flag_get_flag('private_message_notify');
    $users = $wrapper->field_message_user_ref->value();

    if (is_array($users)) {
      foreach ($users as $user) {
        // If the user has the flag to receive notifications, add their email.
        if ($flag && $flag->is_flagged($user->uid)) {
          $mail[] = $user->mail;
        }
      }
    }
    if (!empty($mail)) {
      message_notify_send_message($message, array('mail' => implode(',', $mail)));
    }
  }
}
