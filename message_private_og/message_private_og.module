<?php
/**
 * Private Message OG.
 */

/**
 * Implements hook_requirements.
 *
 * Check if there are Group nodes on the system that can be used in the view.
 */
function message_private_og_requirements($phase) {
  $requirements = array();

  if ($phase == 'install' || $phase == 'runtime') {
    $bundles = og_get_all_group_bundle();
    if(!isset($bundles['node'])) {
      $requirements['message_private_og_bundle'] = array(
        'title' => t('Message Private OG'),
        'description' => t('You need a bundle that is a group type to send group messages'),
        'severity' => REQUIREMENT_WARNING,
        'value' => t('No group bundle'),
      );
    }
  }

  return $requirements;
}

/**
 * Implement hook_og_permission().
 *
 * Provides OG permissions for sending private messages to group users and
 * groups.
 */
function message_private_og_og_permission() {
  $permissions = array();

  // TODO : Evaluate separating out of send to user & send to group permissions.
  $permissions['create a private message instance'] = array(
    'title' => t('Create a private message instance'),
    'description' => t('Create private message for users and groups'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['view a private message instance'] = array(
    'title' => t('View a private message instance'),
    'description' => t('View private messages related to user or group'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['edit a private message instance'] = array(
    'title' => t('Edit a private message instance'),
    'description' => t('Allow author edit access to sent private messages'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['delete a private message instance'] = array(
    'title' => t('Delete a private message instance'),
    'description' => t('Allow author delete access to sent private messages'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  return $permissions;
}

/**
 * Implements hook_menu_alter().
 *
 * Override some of the menu paths set in message ui module.
 */
function message_private_og_menu_alter(&$items) {

  $items['message/%message']['access callback'] = 'message_private_og_access_control';
  $items['message/%message/view']['access callback'] = 'message_private_og_access_control';
  $items['message/%message/delete']['access callback'] = 'message_private_og_access_control';
  $items['admin/content/message/create/private-message']['access callback'] = 'message_private_og_access_control';

  return $items;
}

/**
 * Message module access callback.
 *
 * @param string $operation
 *   The operation - create, view, update, delete.
 * @param object $message
 *   The message object or message type.
 * @param object|null $user_obj
 *   A user object. Optional.
 *
 * @return bool
 *   TRUE if user is allowed to perform the message operation, FALSE otherwise.
 */
function message_private_og_access_control($operation, $message, $user_obj = NULL) {

  if (empty($user_obj)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    $user = $user_obj;
    $account = user_load($user->uid);
  }

  // Get the message type from the function argument or from the message object.
  $type = is_object($message) ? $message->type : $message;

  // If this is not a private message then use the message callback provided by
  // message_ui module.
  if ($type != 'private_message') {
    return message_ui_access_control($operation, $message);
  }
  else {
    // Bypass access control if user has correct permission
    if (user_access('bypass private message access control', $account)) {
      return TRUE;
    }

    // For create operation user needs global create or OG create.
    if ($operation == 'create') {
      // Check global private message permissions.
      if (message_private_access_control($operation, $message)) {
        return TRUE;
      }
      else {
        // Users without global permissions may have OG permissions, check
        // if they have permission for any groups on the system.
        $groups = og_get_groups_by_user($account);
        foreach ($groups as $gid) {
          if (og_user_access('node', $gid, $operation . ' a private message instance', $account)) {
            return TRUE;
          }
        }
      }
    }
    else {
      if ($operation == 'view') {
        // Check if the user is message author.
        if ($message->uid == $account->uid) {
          return TRUE;
        }
        // Check if message was sent to groups and check view access per group.
        $groups = field_get_items('message', $message, 'field_message_groups_ref');
        if ($groups && is_array($groups)) {
          foreach ($groups as $group_ref) {
            if (og_user_access('node', $group_ref['target_id'],
              $operation . ' a private message instance', $account)) {
              return TRUE;
            }
          }
        }
        // Check global private message permissions if no group access.
        if (message_private_access_control($operation, $message)) {
          return TRUE;
        }
      }
      else {
        // Only allow edit and delete privileges for message author and users
        // with 'Bypass access control' global permission checked already.
        if ($message->uid == $account->uid) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide the message_text field from the node edit form.
 * The message_text field  is only useful post creation.
 * i.e. - contains user data. Also, set the custom validator.
 */
function message_private_og_form_message_ui_instance_message_manage_alter(&$form, &$form_state, $form_id) {
  /*
   * TODO: Only allow send to own groups, edit available groups here?
   * If using autocomplete widget this will not work as it will show all groups.
   */
  if ($form['#bundle'] == 'private_message') {
    $form['#validate'][] = 'message_private_og_form_message_ui_instance_message_manage_validate';
  }
}

/**
 * Validation for Private Message form.
 *
 * @param $form
 * @param $form_state
 */
function message_private_og_form_message_ui_instance_message_manage_validate($form, &$form_state) {
  /*
   * TODO: Use the below global permissions to provide full access.
   * $permissions['create any message instance']
   * && $permissions['create a private_message message instance']
   * user_access('bypass private message access control')
   *
   * TODO: Return validation error if trying to send to a group without the
   * correct og_user_access or to a receiving user that is not part of a group
   * that the sending user has og_user_access to.
   *
   * This should have corresponding form or ajax alters to limit the options
   * displayed by the UI in future also.
   */
}

/**
 * Implements hook_views_api().
 */
function message_private_og_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("version" => "3.0");
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function message_private_og_views_default_views_alter(&$views) {
  if (isset($views['message_private']) && is_object($views['message_private'])) {
    $handler =& $views['message_private']->new_display('page', 'OG Messages', 'page_3');

    /* Display: OG Messages */
    $handler->display->display_options['defaults']['fields'] = FALSE;
    /* Field: User: Name */
    $handler->display->display_options['fields']['name']['id'] = 'name';
    $handler->display->display_options['fields']['name']['table'] = 'users';
    $handler->display->display_options['fields']['name']['field'] = 'name';
    $handler->display->display_options['fields']['name']['relationship'] = 'user';
    $handler->display->display_options['fields']['name']['label'] = 'From User';
    /* Field: Message: Groups */
    $handler->display->display_options['fields']['field_message_groups_ref']['id'] = 'field_message_groups_ref';
    $handler->display->display_options['fields']['field_message_groups_ref']['table'] = 'field_data_field_message_groups_ref';
    $handler->display->display_options['fields']['field_message_groups_ref']['field'] = 'field_message_groups_ref';
    $handler->display->display_options['fields']['field_message_groups_ref']['label'] = 'To Groups';
    $handler->display->display_options['fields']['field_message_groups_ref']['settings'] = array(
      'link' => 0,
    );
    $handler->display->display_options['fields']['field_message_groups_ref']['delta_offset'] = '0';
    /* Field: Message: Subject */
    $handler->display->display_options['fields']['field_message_subject']['id'] = 'field_message_subject';
    $handler->display->display_options['fields']['field_message_subject']['table'] = 'field_data_field_message_subject';
    $handler->display->display_options['fields']['field_message_subject']['field'] = 'field_message_subject';
    /* Field: Message: View message */
    $handler->display->display_options['fields']['view']['id'] = 'view';
    $handler->display->display_options['fields']['view']['table'] = 'message';
    $handler->display->display_options['fields']['view']['field'] = 'view';
    $handler->display->display_options['fields']['view']['label'] = 'Operations';
    $handler->display->display_options['fields']['view']['element_label_colon'] = FALSE;
    /* Field: Message: Delete message */
    $handler->display->display_options['fields']['delete']['id'] = 'delete';
    $handler->display->display_options['fields']['delete']['table'] = 'message';
    $handler->display->display_options['fields']['delete']['field'] = 'delete';
    $handler->display->display_options['fields']['delete']['label'] = '';
    $handler->display->display_options['fields']['delete']['element_label_colon'] = FALSE;
    /* Field: Message: Timestamp */
    $handler->display->display_options['fields']['timestamp']['id'] = 'timestamp';
    $handler->display->display_options['fields']['timestamp']['table'] = 'message';
    $handler->display->display_options['fields']['timestamp']['field'] = 'timestamp';
    $handler->display->display_options['fields']['timestamp']['date_format'] = 'short';
    $handler->display->display_options['fields']['timestamp']['second_date_format'] = 'long';
    $handler->display->display_options['defaults']['arguments'] = FALSE;
    /* Contextual filter: Global: Null */
    $handler->display->display_options['arguments']['null']['id'] = 'null';
    $handler->display->display_options['arguments']['null']['table'] = 'views';
    $handler->display->display_options['arguments']['null']['field'] = 'null';
    $handler->display->display_options['arguments']['null']['default_argument_type'] = 'fixed';
    $handler->display->display_options['arguments']['null']['summary']['number_of_records'] = '0';
    $handler->display->display_options['arguments']['null']['summary']['format'] = 'default_summary';
    $handler->display->display_options['arguments']['null']['summary_options']['items_per_page'] = '25';
    /* Contextual filter: Message: Groups (field_message_groups_ref) */
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['id'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['table'] = 'field_data_field_message_groups_ref';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['field'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['default_action'] = 'default';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['default_argument_type'] = 'og_user_groups';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['summary']['number_of_records'] = '0';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['summary']['format'] = 'default_summary';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['summary_options']['items_per_page'] = '25';
    $handler->display->display_options['defaults']['filter_groups'] = FALSE;
    $handler->display->display_options['defaults']['filters'] = FALSE;
    /* Filter criterion: Message: Type */
    $handler->display->display_options['filters']['type_1']['id'] = 'type_1';
    $handler->display->display_options['filters']['type_1']['table'] = 'message';
    $handler->display->display_options['filters']['type_1']['field'] = 'type';
    $handler->display->display_options['filters']['type_1']['value'] = array(
      'private_message' => 'private_message',
    );
    /* Filter criterion: Message: Groups (field_message_groups_ref) */
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['id'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['table'] = 'field_data_field_message_groups_ref';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['field'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['exposed'] = TRUE;
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['operator_id'] = 'field_message_groups_ref_target_id_op';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['label'] = 'Groups';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['operator'] = 'field_message_groups_ref_target_id_op';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['identifier'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['remember_roles'] = array(
      2 => '2',
      1 => 0,
      3 => 0,
    );
    $handler->display->display_options['path'] = 'user/%/messages/group';
    $handler->display->display_options['menu']['type'] = 'tab';
    $handler->display->display_options['menu']['title'] = 'Group';
    $handler->display->display_options['menu']['weight'] = '12';
    $handler->display->display_options['menu']['context'] = 0;
    $handler->display->display_options['menu']['context_only_inline'] = 0;
    }
  }

/**
 * Implements hook_message_insert().
 *
 * Send an email if a private message has been created.
 */
function message_private_og_message_insert($message) {
  if ($message->type == 'private_message') {
    $wrapper = entity_metadata_wrapper('message', $message);

    $mail = array();
    $flag = flag_get_flag('private_message_notify');
    $groups = $wrapper->field_message_groups_ref->value();

    if (!empty($groups) && is_array($groups)) {
      foreach ($groups as $group) {
        $uids = og_get_group_members_properties($group,
          array(), 'members', 'node');
        $users = user_load_multiple($uids);
        foreach ($users as $user) {
          // If the user has the flag to receive notifications, add their email.
          if ($flag && $flag->is_flagged($user->uid)) {
            $mail[] = $user->mail;
          }
        }
      }
    }
    if (!empty($mail)) {
      message_notify_send_message($message, array('mail' => implode(',', $mail)));
    }
  }
}
