<?php
/**
 * Private Message OG.
 */

module_load_include('inc', 'message_private_og', 'message_private_og.features.field_base');
module_load_include('inc', 'message_private_og', 'message_private_og.features.field_instance');

/**
 * Implement hook_og_permission().
 *
 * Provides OG permissions for sending private messages to group users and group
 */
function message_private_og_og_permission() {
  $permissions = array();

  $permissions['view a private message instance'] = array(
    'title' => t('View a private message instance'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['delete a private message instance'] = array(
    'title' => t('Delete a private message instance'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['send a private message to users'] = array(
    'title' => t('Send private message to users'),
    'description' => t('Send a private message to individual users of the group.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['send a private message to group'] = array(
    'title' => t('Send a private message to the group'),
    'description' => t('Send a private message to al users of the group.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  return $permissions;
}

/**
 * Implements hook_menu_alter().
 *
 * Override some of the menu paths set in message ui module.
 */
function message_private_menu_alter(&$items) {

  $items['message/%message'] = array(
    'title' => 'Viewing a message',
    'description' => 'Select a message to create an instance.',
    'page callback' => 'message_ui_show_message',
    'page arguments' => array(1),
    'access callback' => 'message_private_og_access_control',
    'access arguments' => array('view', 1),
  );

  $items['message/%message/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'access callback' => 'message_private_og_access_control',
    'access arguments' => array('view', 1),
  );

  $items['message/%message/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_ui_instance_delete', 1),
    'access callback' => 'message_private_og_access_control',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 10,
  );

  $items['admin/content/message/create/private-message'] = array(
    'title' => 'Create a new Private Message',
    'description' => 'Create a new Private Message instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_ui_instance_message_manage', 'private_message'),
    'access arguments' => array('create', 'private_message'),
    'access callback' => 'message_private_og_access_control',
  );

  return $items;
}

/**
 * Message module access callback.
 *
 * @param string $operation
 *   The operation - create, view, update, delete.
 * @param object $message
 *   The message object or message type.
 * @param object|null $user_obj
 *   A user object. Optional.
 *
 * @return bool
 *   TRUE or FALSE.
 */
function message_private_og_access_control($operation, $message, $user_obj = NULL) {

  if (empty($user_obj)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    $user = $user_obj;
    $account = user_load($user->uid);
  }

  // Get the message type from the function argument or from the message object.
  $type = is_object($message) ? $message->type : $message;

  if ($type == 'private_message'
    && (user_access('bypass private message access control', $account))
  ) {
    return TRUE;
  }

  if($type == 'private_message') {
    // Verify that the user can apply the op.
    if ($operation != 'create') {
      // For users with global message permissions for any message types
      if (user_access($operation . ' any message instance', $account)
        || user_access($operation . ' a ' . $type . ' message instance', $account)) {
        if (isset($message->field_message_user_ref[LANGUAGE_NONE])) {
          foreach ($message->field_message_user_ref[LANGUAGE_NONE] as $user_ref) {
            if ($user_ref['target_id'] == $user->uid) {
              return TRUE;
            }
          }
        } else {
          // do not allow the deletion of group messages
          if (isset($message->field_node_groups_ref[LANGUAGE_NONE]) &&
            $operation != 'delete'
          ) {
            foreach ($message->field_node_groups_ref[LANGUAGE_NONE] as $group_ref) {
              if (og_user_access('message', $group_ref['target_id'],
                $operation . ' a private message instance', $account)) {
                return TRUE;
              }
            }
          }
        }
      } else {
        // Get all user groups and cycle through to verify og permissions
        $groups = og_get_groups_by_user($account);
        foreach ($groups as $group => $gid) {
          if (og_user_access('message', $gid,
            $operation . ' a private message instance', $account)) {
            if (isset($message->field_message_user_ref[LANGUAGE_NONE])) {
              foreach ($message->field_message_user_ref[LANGUAGE_NONE] as $user_ref) {
                if ($user_ref['target_id'] == $user->uid) {
                  return TRUE;
                }
              }
            }
            else {
              // do not allow the deletion of group messages
              if (isset($message->field_node_groups_ref[LANGUAGE_NONE]) &&
                $operation != 'delete'
              ) {
                foreach ($message->field_node_groups_ref[LANGUAGE_NONE] as $group_ref) {
                  if (og_user_access('message', $group_ref['target_id'],
                    $operation . ' a private message instance', $account)) {
                    return TRUE;
                  }
                }
              }
            }
          }
        }
      }
    }
    else if ($operation == 'create') {
      // For users with global message permissions
      if (user_access($operation . ' any message instance', $account)
        || user_access($operation . ' a ' . $type . ' message instance', $account)) {
        return TRUE;
      } else {
        // For users with og message permissions check create for each group
        $groups = og_get_groups_by_user($account);
        foreach ($groups as $group => $gid) {
          if (og_user_access('message', $gid,
              'send a private message to users', $account) ||
            og_user_access('message', $gid,
              'send a private message to group', $account)
          ) {
            return TRUE;
          }
        }
      }
    }
  }
  // For users with global message permissions for any message types
  if (user_access($operation . ' any message instance', $account)
    || user_access($operation . ' a ' . $type . ' message instance', $account)) {
    // TODO: The delete message and edit message permissions may need to display
    // warnings in the permission description.
    return TRUE;
  }
  return FALSE;
}

/**
 * Hide the message_text field from the node edit form.
 *
 * The message_text field  is only useful post creation.
 * i.e. - contains user data. Also, set the custom validator.
 */
function message_private_og_form_message_ui_instance_message_manage_alter(&$form, &$form_state, $form_id) {
  /*
   * TODO: hide group or user field depending on the permissions had for any group
   * i.e. - cycle through groups and set to unhide if any permission found in a group.
   * If bypass permissions then we just display everything.
   */
  if ($form['#bundle'] == 'private_message') {
    $form['#validate'][] = 'message_private_og_form_message_ui_instance_message_manage_validate';
  }
}

/**
 * Validation for Private Message form.
 *
 * @param $form
 * @param $form_state
 */
function message_private_og_form_message_ui_instance_message_manage_validate($form, &$form_state) {
  /*
   * TODO:
   * Make sure the user has send to group permissions for any group requested to send
   * Make sure the user has send to person permissions for any person requested to send
   * Make sure any person who has been requested to send is in the same group as the user
   * has permissions to send to.
   *
   * If bypass private message access then you can send to any group/person.
   */
  //user_access('bypass private message access control')
}

/**
 * Implements hook_views_api().
 */
function message_private_og_views_api() {
  list($module, $api) = func_get_args();
  if ($module == "views" && $api == "views_default") {
    return array("version" => "3.0");
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function message_private_og_views_default_views_alter(&$views) {
  if (isset($views['message_private']) && is_object($views['message_private'])) {
    $handler =& $views['message_private']->new_display('page', 'OG Messages', 'page_3');

    /* Display: OG Messages */
    $handler->display->display_options['defaults']['fields'] = FALSE;
    /* Field: User: Name */
    $handler->display->display_options['fields']['name']['id'] = 'name';
    $handler->display->display_options['fields']['name']['table'] = 'users';
    $handler->display->display_options['fields']['name']['field'] = 'name';
    $handler->display->display_options['fields']['name']['relationship'] = 'user';
    $handler->display->display_options['fields']['name']['label'] = 'From User';
    /* Field: Message: Groups */
    $handler->display->display_options['fields']['field_message_groups_ref']['id'] = 'field_message_groups_ref';
    $handler->display->display_options['fields']['field_message_groups_ref']['table'] = 'field_data_field_message_groups_ref';
    $handler->display->display_options['fields']['field_message_groups_ref']['field'] = 'field_message_groups_ref';
    $handler->display->display_options['fields']['field_message_groups_ref']['label'] = 'To Groups';
    $handler->display->display_options['fields']['field_message_groups_ref']['settings'] = array(
      'link' => 0,
    );
    $handler->display->display_options['fields']['field_message_groups_ref']['delta_offset'] = '0';
    /* Field: Message: Subject */
    $handler->display->display_options['fields']['field_message_subject']['id'] = 'field_message_subject';
    $handler->display->display_options['fields']['field_message_subject']['table'] = 'field_data_field_message_subject';
    $handler->display->display_options['fields']['field_message_subject']['field'] = 'field_message_subject';
    /* Field: Message: View message */
    $handler->display->display_options['fields']['view']['id'] = 'view';
    $handler->display->display_options['fields']['view']['table'] = 'message';
    $handler->display->display_options['fields']['view']['field'] = 'view';
    $handler->display->display_options['fields']['view']['label'] = 'Operations';
    $handler->display->display_options['fields']['view']['element_label_colon'] = FALSE;
    /* Field: Message: Delete message */
    $handler->display->display_options['fields']['delete']['id'] = 'delete';
    $handler->display->display_options['fields']['delete']['table'] = 'message';
    $handler->display->display_options['fields']['delete']['field'] = 'delete';
    $handler->display->display_options['fields']['delete']['label'] = '';
    $handler->display->display_options['fields']['delete']['element_label_colon'] = FALSE;
    /* Field: Message: Timestamp */
    $handler->display->display_options['fields']['timestamp']['id'] = 'timestamp';
    $handler->display->display_options['fields']['timestamp']['table'] = 'message';
    $handler->display->display_options['fields']['timestamp']['field'] = 'timestamp';
    $handler->display->display_options['fields']['timestamp']['date_format'] = 'short';
    $handler->display->display_options['fields']['timestamp']['second_date_format'] = 'long';
    $handler->display->display_options['defaults']['arguments'] = FALSE;
    /* Contextual filter: Message: Groups (field_message_groups_ref) */
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['id'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['table'] = 'field_data_field_message_groups_ref';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['field'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['default_action'] = 'default';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['default_argument_type'] = 'og_user_groups';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['summary']['number_of_records'] = '0';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['summary']['format'] = 'default_summary';
    $handler->display->display_options['arguments']['field_message_groups_ref_target_id']['summary_options']['items_per_page'] = '25';
    $handler->display->display_options['defaults']['filter_groups'] = FALSE;
    $handler->display->display_options['defaults']['filters'] = FALSE;
    /* Filter criterion: Message: Type */
    $handler->display->display_options['filters']['type_1']['id'] = 'type_1';
    $handler->display->display_options['filters']['type_1']['table'] = 'message';
    $handler->display->display_options['filters']['type_1']['field'] = 'type';
    $handler->display->display_options['filters']['type_1']['value'] = array(
      'private_message' => 'private_message',
    );
    /* Filter criterion: Message: Groups (field_message_groups_ref) */
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['id'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['table'] = 'field_data_field_message_groups_ref';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['field'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['exposed'] = TRUE;
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['operator_id'] = 'field_message_groups_ref_target_id_op';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['label'] = 'Groups';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['operator'] = 'field_message_groups_ref_target_id_op';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['identifier'] = 'field_message_groups_ref_target_id';
    $handler->display->display_options['filters']['field_message_groups_ref_target_id']['expose']['remember_roles'] = array(
      2 => '2',
      1 => 0,
      3 => 0,
    );
    $handler->display->display_options['path'] = 'user/%/messages/group';
    $handler->display->display_options['menu']['type'] = 'tab';
    $handler->display->display_options['menu']['title'] = 'Group';
    $handler->display->display_options['menu']['weight'] = '12';
    $handler->display->display_options['menu']['context'] = 0;
    $handler->display->display_options['menu']['context_only_inline'] = 0;
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Send an email if a private message has been created.
 */
function message_private_og_entity_insert($entity, $type) {
  if ($type == 'message' && $entity->type == 'private_message') {
    // Use message load as the $entity object has issue with mail function here.
    $message = message_load($entity->mid);
    $wrapper = entity_metadata_wrapper('message', $message);
    $groups = $wrapper->field_message_groups_ref->value();
    $mail = array();
    if (!empty($groups) && is_array($groups)) {
      foreach ($groups as $group) {
        $uids = og_get_group_members_properties($group,
          array(), 'members', 'node');
        $users = user_load_multiple($uids);
        foreach ($users as $user) {
          $mail[] = $user->mail;
        }
      }
    }
    if (!empty($mail)) {
      message_notify_send_message($message, array('mail' => implode(',', $mail)));
    }
  }
}
